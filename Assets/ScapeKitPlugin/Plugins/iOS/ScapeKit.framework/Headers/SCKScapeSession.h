// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from scape.djinni

#import "SCKGeoSourceType.h"
#import "SCKXrFrame.h"
#import <Foundation/Foundation.h>
@class SCKScapeSession;
@protocol SCKLocationSession;
@protocol SCKMotionSession;
@protocol SCKScapeSessionObserver;
@protocol SCKXrSession;


/**
 * (public)
 * ScapeKit's main service: gets measurements from the raw device's built-in sensors as well as Scape Vision Engine
 */
@interface SCKScapeSession : NSObject

/**
 * (internal)
 * Create the Measurements service
 */

/**
 * (internal)
 * Needed for all GPS and Compass related features
 */

/**
 * (internal)
 * Needed for all Gyroscope/Accelerometer related features
 */

/**
 * (internal)
 * Needed for all XR related features (camera frame, camera transform, camera intrinsics)
 */

/**
 * (public)
 * Start measurements fetching at continuous interval
 * We need to specify the GeoSourceType to determine if we only want to get a device's sensors-based measurements (gyroscope, accelerometer, gps, magnetometer) 
 * or if we want to combine those sensors with Scape Vision Engine to get hyper-accurate measurements 
 */
- (void)startFetch:(SCKGeoSourceType)type
          observer:(nullable id<SCKScapeSessionObserver>)observer;

/**
 * (public)
 * Stop measurements fetching at continuous interval
 */
- (void)stopFetch;

/**
 * (public)
 * Get the measurements 
 * We need to specify the GeoSourceType to determine if we only want to get a device's sensors-based measurements (gyroscope, accelerometer, gps, magnetometer) 
 * or if we want to combine those sensors with Scape Vision Engine to get hyper-accurate measurements 
 */
- (void)getMeasurements:(SCKGeoSourceType)type
               observer:(nullable id<SCKScapeSessionObserver>)observer;

/**
 * (public)
 * Set the xr frame manually (when xrSession is not used)
 */
- (void)setRawXrFrame:(nullable SCKXrFrame *)frame;

/**
 * (public)
 * Set the Y channel manually (when xrSession is not used)
 */
- (void)setYChannelPtr:(int64_t)pointer
                 width:(int32_t)width
                height:(int32_t)height;

/**
 * (public)
 * Set the camera intrinsics manually (when xrSession is not used)
 */
- (void)setCameraIntrinsics:(double)xFocalLength
               yFocalLength:(double)yFocalLength
            xPrincipalPoint:(double)xPrincipalPoint
            yPrincipalPoint:(double)yPrincipalPoint;

/**
 * (public)
 * Set camera transform manually (when xrSession is not used)
 */
- (void)setCameraTransform:(nonnull NSArray<NSNumber *> *)transform;

@end
